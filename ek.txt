// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.26;

contract Voting {
    address public officialAddress;
    string[] public candidateList;
    mapping(string => uint) public votesReceived;
    mapping(address => bool) public isVoted;

    //ประกาศตัวแปรประเภท enum ชื่อ State มีค่าเป็นไปได้คือ Created/ Voting/ Ended
    enum State {Created, Voting, Ended}

    //ประกาศตัวแปรประเภท state มีชนิดข้อมูลเป็น State 
    State public state;

    constructor(address _officialAddress, string[] memory candidateNames) {
        officialAddress = _officialAddress;
        candidateList = candidateNames;
        state = State.Created;
    }

    modifier onlyOfficial() {
        require(msg.sender == officialAddress, "ONLY Official");
        _;
    }

    modifier inState(State _state) {
        require(state == _state, "INCORRECT STATE");
        _;
    }

    function startVote() public inState(State.Created) onlyOfficial {
        state = State.Voting;
    }

    function endVote() public inState(State.Voting) onlyOfficial {
        state = State.Ended;
    }

    function voteForCandidate(string memory candidate) public inState(State.Voting) {
        require(!isVoted[msg.sender], "ALREADY VOTED");
        require(validCandidate(candidate), "INVALID CANDIDATE");

        votesReceived[candidate] += 1;
        isVoted[msg.sender] = true;
    }

    function totalVotesFor(string memory candidate) public view inState(State.Ended) returns (uint) {
        return votesReceived[candidate];
    }

    function validCandidate(string memory candidate) internal view returns (bool) {
        for (uint i = 0; i < candidateList.length; i++) {
            if (keccak256(abi.encodePacked(candidateList[i])) == keccak256(abi.encodePacked(candidate))) {
                return true;
            }
        }
        return false;
    }
}
